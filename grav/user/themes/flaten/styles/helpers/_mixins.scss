@function parse-int($n) {
  @return $n / ($n * 0 + 1);
}

@mixin rem($property, $values)
{
  $px: ();
  $rem: ();
  @each $value in $values
  {
    @if $value == 0 or $value == auto
    {
      $px: append($px , $value);
      $rem: append($rem, $value);
    }
    @else
    {
      $unit: unit($value);
      $val: parse-int($value);

      @if $unit == 'px'
      {
        $px: append($px, $value);
        $rem: append($rem, ($val / 16 + rem));
      }

      @if $unit == 'rem'
      {
        $px: append($px, ($val * 16 + px));
        $rem: append($rem, $value);
      }
    }
  }
  @if $px == $rem
  {
    #{$property}: $px;
  }
  @else
  {
    #{$property}: $px;
    #{$property}: $rem;
  }
}

// positioning center
@mixin center($xy: xy) {
  @if $xy == xy {
    top: 50%;
    right: auto;
    bottom: auto;
    left: 50%;
    transform: translateX(-50%) translateY(-50%);
  } @else if $xy == x {
    right: auto;
    left: 50%;
    transform: translateX(-50%);
  } @else if $xy == y {
    top: 50%;
    bottom: auto;
    transform: translateY(-50%);
  } @else if $xy == 0 {
    top: auto;
    right: auto;
    bottom: auto;
    left: auto;
    transform: translateX(0) translateY(0);
  }
}

// Position fix
@mixin positioning() {
  transform: translateZ(0);
}

// 3D performance
@mixin performance() {
  transform: translate3d(0, 0, 0);
  transform-style: preserve-3d;
}

// Flickering fix
@mixin flickering() {
  backface-visibility: hidden;
  perspective: 1000;
}

@mixin fullscreen() {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

// color tint and shade
@function shade($color, $percent) {
  @return mix(#000, $color, $percent);
}

@function tint($color, $percent) {
  @return mix(#fff, $color, $percent);
}

// placeholders
@mixin placeholders {
  $placeholders: ':-webkit-input' ':-moz' '-moz' '-ms-input';
  @each $placeholder in $placeholders {
    &:#{$placeholder}-placeholder {
      @content;
    }
  }
}
